// Generated by CoffeeScript 1.10.0
var ICalParser, VAlarm, VCalendar, VComponent, VDaylight, VEvent, VFreeBusy, VJournal, VStandard, VTimezone, VTodo, fs, iCalBuffer, lazy, moment,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

fs = require('fs');

moment = require('moment');

lazy = require('lazy');

iCalBuffer = (function() {
  function iCalBuffer() {}

  iCalBuffer.prototype.txt = '';

  iCalBuffer.prototype.addString = function(text) {
    return this.txt += text;
  };

  iCalBuffer.prototype.addStrings = function(texts) {
    var i, len, results, text;
    results = [];
    for (i = 0, len = texts.length; i < len; i++) {
      text = texts[i];
      results.push(this.addString(text));
    }
    return results;
  };

  iCalBuffer.prototype.addLine = function(text) {
    return this.addString(text + "\r\n");
  };

  iCalBuffer.prototype.addLines = function(texts) {
    var i, len, results, text;
    results = [];
    for (i = 0, len = texts.length; i < len; i++) {
      text = texts[i];
      results.push(this.addLine(text));
    }
    return results;
  };

  iCalBuffer.prototype.toString = function() {
    return this.txt;
  };

  return iCalBuffer;

})();

module.exports.VComponent = VComponent = (function() {
  VComponent.prototype.name = 'VCOMPONENT';

  function VComponent() {
    this.subComponents = [];
    this.fields = {};
  }

  VComponent.prototype.toString = function() {
    var att, buf, component, i, len, ref, ref1, val;
    buf = new iCalBuffer;
    buf.addLine("BEGIN:" + this.name);
    ref = this.fields;
    for (att in ref) {
      val = ref[att];
      buf.addLine(att + ":" + val);
    }
    ref1 = this.subComponents;
    for (i = 0, len = ref1.length; i < len; i++) {
      component = ref1[i];
      buf.addLine(component.toString());
    }
    return buf.addString("END:" + this.name);
  };

  VComponent.prototype.formatIcalDate = function(date) {
    return moment(date).format('YYYYMMDDTHHmm00');
  };

  VComponent.prototype.add = function(component) {
    return this.subComponents.push(component);
  };

  return VComponent;

})();

module.exports.VCalendar = VCalendar = (function(superClass) {
  extend(VCalendar, superClass);

  VCalendar.prototype.name = 'VCALENDAR';

  function VCalendar(organization, title) {
    VCalendar.__super__.constructor.apply(this, arguments);
    this.fields = {
      VERSION: "2.0"
    };
    this.fields['PRODID'] = "-//" + organization + "//NONSGML " + title + "//EN";
  }

  return VCalendar;

})(VComponent);

module.exports.VAlarm = VAlarm = (function(superClass) {
  extend(VAlarm, superClass);

  VAlarm.prototype.name = 'VALARM';

  function VAlarm(date) {
    VAlarm.__super__.constructor.apply(this, arguments);
    this.fields = {
      ACTION: 'AUDIO',
      REPEAT: '1',
      TRIGGER: this.formatIcalDate(date)
    };
  }

  return VAlarm;

})(VComponent);

module.exports.VTodo = VTodo = (function(superClass) {
  extend(VTodo, superClass);

  VTodo.prototype.name = 'VTODO';

  function VTodo(date, user, description) {
    VTodo.__super__.constructor.apply(this, arguments);
    this.fields = {
      DSTAMP: this.formatIcalDate(date),
      SUMMARY: description,
      UID: user
    };
  }

  VTodo.prototype.addAlarm = function(date) {
    return this.add(new VAlarm(date));
  };

  return VTodo;

})(VComponent);

module.exports.VEvent = VEvent = (function(superClass) {
  extend(VEvent, superClass);

  VEvent.prototype.name = 'VEVENT';

  function VEvent(startDate, endDate, description, location) {
    VEvent.__super__.constructor.apply(this, arguments);
    this.fields = {
      DESCRIPTION: description,
      DTSTART: this.formatIcalDate(startDate),
      DTEND: this.formatIcalDate(endDate),
      LOCATION: location
    };
  }

  return VEvent;

})(VComponent);

module.exports.VTimezone = VTimezone = (function(superClass) {
  extend(VTimezone, superClass);

  function VTimezone() {
    return VTimezone.__super__.constructor.apply(this, arguments);
  }

  VTimezone.prototype.name = 'VTIMEZONE';

  return VTimezone;

})(VComponent);

module.exports.VJournal = VJournal = (function(superClass) {
  extend(VJournal, superClass);

  function VJournal() {
    return VJournal.__super__.constructor.apply(this, arguments);
  }

  VJournal.prototype.name = 'VJOURNAL';

  return VJournal;

})(VComponent);

module.exports.VFreeBusy = VFreeBusy = (function(superClass) {
  extend(VFreeBusy, superClass);

  function VFreeBusy() {
    return VFreeBusy.__super__.constructor.apply(this, arguments);
  }

  VFreeBusy.prototype.name = 'VFREEBUSY';

  return VFreeBusy;

})(VComponent);

module.exports.VStandard = VStandard = (function(superClass) {
  extend(VStandard, superClass);

  function VStandard() {
    return VStandard.__super__.constructor.apply(this, arguments);
  }

  VStandard.prototype.name = 'VSTANDARD';

  return VStandard;

})(VComponent);

module.exports.VDaylight = VDaylight = (function(superClass) {
  extend(VDaylight, superClass);

  function VDaylight() {
    return VDaylight.__super__.constructor.apply(this, arguments);
  }

  VDaylight.prototype.name = 'VDAYLIGHT';

  return VDaylight;

})(VComponent);

module.exports.ICalParser = ICalParser = (function() {
  function ICalParser() {}

  ICalParser.components = {
    VTODO: VTodo,
    VALARM: VAlarm,
    VEVENT: VEvent,
    VJOURNAL: VJournal,
    VFREEBUSY: VFreeBusy,
    VTIMEZONE: VTimezone,
    STANDARD: VStandard,
    DAYLIGHT: VDaylight
  };

  ICalParser.prototype.parseFile = function(file, callback) {
    return this.parse(fs.createReadStream(file), callback);
  };

  ICalParser.prototype.parseString = function(string, callback) {
    var FakeStream, fakeStream;
    FakeStream = (function(superClass) {
      extend(FakeStream, superClass);

      function FakeStream() {
        return FakeStream.__super__.constructor.apply(this, arguments);
      }

      FakeStream.prototype.readable = true;

      FakeStream.prototype.writable = false;

      FakeStream.prototype.setEncoding = function() {
        throw 'not implemented';
      };

      FakeStream.prototype.pipe = function() {
        throw 'not implemented';
      };

      FakeStream.prototype.destroy = function() {};

      FakeStream.prototype.resume = function() {};

      FakeStream.prototype.pause = function() {};

      FakeStream.prototype.send = function(string) {
        this.emit('data', string);
        return this.emit('end');
      };

      return FakeStream;

    })(require('events').EventEmitter);
    fakeStream = new FakeStream;
    this.parse(fakeStream, callback);
    return fakeStream.send(string);
  };

  ICalParser.prototype.parse = function(stream, callback) {
    var component, createComponent, lineNumber, lineParser, noerror, parent, result, sendError;
    result = {};
    noerror = true;
    lineNumber = 0;
    component = null;
    parent = null;
    stream.on('end', function() {
      if (noerror) {
        return callback(null, result);
      }
    });
    sendError = function(msg) {
      if (noerror) {
        callback(new Error(msg + " (line " + lineNumber + ")"));
      }
      return noerror = false;
    };
    createComponent = function(name) {
      parent = component;
      if (name === "VCALENDAR") {
        if (result.fields != null) {
          sendError("Cannot import more than one calendar");
        }
        component = new VCalendar();
        result = component;
      } else if (indexOf.call(Object.keys(ICalParser.components), name) >= 0) {
        component = new ICalParser.components[name]();
      } else {
        sendError("Malformed ical file");
      }
      if (component != null) {
        component.parent = parent;
      }
      return parent != null ? parent.add(component) : void 0;
    };
    lineParser = function(line) {
      var key, tuple, value;
      lineNumber++;
      line = line.toString('utf-8').trim();
      tuple = line.split(':');
      if (tuple.length < 2) {
        return sendError("Malformed ical file");
      } else {
        key = tuple[0];
        tuple.shift();
        value = tuple.join('');
        if (key === "BEGIN") {
          return createComponent(value);
        } else if (key === "END") {
          return component = component.parent;
        } else if (!((component != null) || (result != null))) {
          return sendError("Malformed ical file");
        } else if ((key != null) && key !== '' && (component != null)) {
          key = key.split(';')[0];
          return component.fields[key] = value;
        } else {
          return sendError("Malformed ical file");
        }
      }
    };
    return lazy(stream).lines.forEach(lineParser);
  };

  return ICalParser;

})();

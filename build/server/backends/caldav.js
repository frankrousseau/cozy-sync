// Generated by CoffeeScript 1.10.0
"use strict";
var CalDAV_CQValidator, CalendarQueryParser, CozyCalDAVBackend, Event, Exc, ICalParser, SCCS, VCalendar, VEvent, VObject_Reader, VTimezone, WebdavAccount, async, axon, log, ref, time,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

Exc = require("cozy-jsdav-fork/lib/shared/exceptions");

SCCS = require("cozy-jsdav-fork/lib/CalDAV/properties/supportedCalendarComponentSet");

CalendarQueryParser = require('cozy-jsdav-fork/lib/CalDAV/calendarQueryParser');

VObject_Reader = require('cozy-jsdav-fork/lib/VObject/reader');

CalDAV_CQValidator = require('cozy-jsdav-fork/lib/CalDAV/calendarQueryValidator');

WebdavAccount = require('../models/webdavaccount');

Event = require('../models/event');

async = require("async");

axon = require('axon');

time = require("time");

ref = require("cozy-ical"), ICalParser = ref.ICalParser, VCalendar = ref.VCalendar, VTimezone = ref.VTimezone, VEvent = ref.VEvent;

log = require('printit')({
  prefix: 'caldav:backend'
});

module.exports = CozyCalDAVBackend = (function() {
  function CozyCalDAVBackend(Event1, User) {
    this.Event = Event1;
    this.User = User;
    this.createCalendarObject = bind(this.createCalendarObject, this);
    this._extractCalObject = bind(this._extractCalObject, this);
    this.getLastCtag((function(_this) {
      return function(err, ctag) {
        var onChange, socket;
        _this.ctag = ctag + 1;
        _this.saveLastCtag(_this.ctag);
        onChange = function() {
          _this.ctag = _this.ctag + 1;
          _this.saveLastCtag(_this.ctag);
          return _this.icalCalendars = void 0;
        };
        socket = axon.socket('sub-emitter');
        socket.connect(9105);
        socket.on('alarm.*', onChange);
        return socket.on('event.*', onChange);
      };
    })(this));
  }

  CozyCalDAVBackend.prototype.getLastCtag = function(callback) {
    return WebdavAccount.first(function(err, account) {
      return callback(err, (account != null ? account.ctag : void 0) || 0);
    });
  };

  CozyCalDAVBackend.prototype.saveLastCtag = function(ctag, callback) {
    if (callback == null) {
      callback = function() {};
    }
    return WebdavAccount.first(function(err, account) {
      if (err || !account) {
        return callback(err);
      }
      return account.updateAttributes({
        ctag: ctag
      }, function() {});
    });
  };

  CozyCalDAVBackend.prototype.getCalendarsForUser = function(principalUri, callback) {
    if (this.icalCalendars != null) {
      return setTimeout((function(_this) {
        return function() {
          return callback(null, _this.icalCalendars);
        };
      })(this), 0);
    } else {
      return Event.calendars((function(_this) {
        return function(err, calendars) {
          _this.icalCalendars = calendars.map(function(calendarTag) {
            var calendarData;
            calendarData = {
              id: calendarTag.name,
              uri: calendarTag.name,
              principaluri: principalUri,
              "{http://calendarserver.org/ns/}getctag": _this.ctag,
              "{urn:ietf:params:xml:ns:caldav}supported-calendar-component-set": SCCS["new"](['VEVENT']),
              "{DAV:}displayname": calendarTag.name,
              "{http://apple.com/ns/ical/}calendar-color": calendarTag.color
            };
            return calendarData;
          });
          return callback(err, _this.icalCalendars);
        };
      })(this));
    }
  };

  CozyCalDAVBackend.prototype.createCalendar = function(principalUri, url, properties, callback) {
    return callback(null, null);
  };

  CozyCalDAVBackend.prototype.updateCalendar = function(calendarId, mutations, callback) {
    return callback(null, false);
  };

  CozyCalDAVBackend.prototype.deleteCalendar = function(calendarId, callback) {
    return callback(null, null);
  };

  CozyCalDAVBackend.prototype._toICal = function(obj, timezone) {
    var cal;
    cal = new VCalendar({
      organization: 'Cozy',
      title: 'Cozy Calendar'
    });
    cal.add(obj.toIcal(timezone));
    return cal.toString();
  };

  CozyCalDAVBackend.prototype.getCalendarObjects = function(calendarId, callback) {
    var objects;
    objects = [];
    return async.parallel([
      (function(_this) {
        return function(cb) {
          return _this.Event.byCalendar(calendarId, cb);
        };
      })(this), (function(_this) {
        return function(cb) {
          return _this.User.getTimezone(cb);
        };
      })(this)
    ], (function(_this) {
      return function(err, results) {
        var events, timezone;
        if (err) {
          return callback(err);
        }
        events = results[0], timezone = results[1];
        objects = events.map(function(obj) {
          var lastModification;
          lastModification = obj.lastModification;
          if (lastModification != null) {
            lastModification = new Date(lastModification);
          } else {
            lastModification = new Date();
          }
          return {
            id: obj.id,
            uri: obj.caldavuri || (obj.id + ".ics"),
            calendardata: _this._toICal(obj, timezone),
            lastmodified: lastModification.getTime()
          };
        });
        return callback(null, objects);
      };
    })(this));
  };

  CozyCalDAVBackend.prototype._findCalendarObject = function(calendarId, objectUri, callback) {
    return this.Event.byURI(objectUri, function(err, results) {
      return callback(err, results[0]);
    });
  };

  CozyCalDAVBackend.prototype._extractCalObject = function(calendarobj) {
    var found, i, len, obj, ref1;
    if (calendarobj instanceof VEvent) {
      return calendarobj;
    } else {
      ref1 = calendarobj.subComponents;
      for (i = 0, len = ref1.length; i < len; i++) {
        obj = ref1[i];
        found = this._extractCalObject(obj);
        if (found) {
          return found;
        }
      }
      return false;
    }
  };

  CozyCalDAVBackend.prototype._parseSingleObjICal = function(calendarData, callback) {
    return new ICalParser().parseString(calendarData, (function(_this) {
      return function(err, calendar) {
        if (err) {
          return callback(err);
        }
        return callback(null, _this._extractCalObject(calendar));
      };
    })(this));
  };

  CozyCalDAVBackend.prototype.getCalendarObject = function(calendarId, objectUri, callback) {
    return this._findCalendarObject(calendarId, objectUri, (function(_this) {
      return function(err, obj) {
        var lastModification, timezone;
        if (err) {
          return callback(err);
        }
        if (!obj) {
          return callback(null, null);
        }
        timezone = _this.User.timezone;
        lastModification = obj.lastModification;
        if (lastModification != null) {
          lastModification = new Date(lastModification);
        } else {
          lastModification = new Date();
        }
        return callback(null, {
          id: obj.id,
          uri: obj.caldavuri || (obj.id + ".ics"),
          calendardata: _this._toICal(obj, timezone),
          lastmodified: lastModification.getTime()
        });
      };
    })(this));
  };

  CozyCalDAVBackend.prototype.createCalendarObject = function(calendarId, objectUri, calendarData, callback) {
    return this._parseSingleObjICal(calendarData, (function(_this) {
      return function(err, obj) {
        var event;
        if (err) {
          return callback(err);
        }
        if (obj.name === 'VEVENT') {
          event = _this.Event.fromIcal(obj, calendarId);
          event.id = null;
          event.caldavuri = objectUri;
          return _this.Event.create(event, function(err, event) {
            return callback(err, null);
          });
        } else {
          return callback(Exc.notImplementedYet());
        }
      };
    })(this));
  };

  CozyCalDAVBackend.prototype.updateCalendarObject = function(calendarId, objectUri, calendarData, callback) {
    return this._findCalendarObject(calendarId, objectUri, (function(_this) {
      return function(err, oldObj) {
        if (err) {
          return callback(err);
        }
        return _this._parseSingleObjICal(calendarData, function(err, newObj) {
          var event;
          if (err) {
            return callback(err);
          }
          if (newObj.name === 'VEVENT' && oldObj instanceof _this.Event) {
            event = _this.Event.fromIcal(newObj, calendarId).toObject();
            delete event.id;
            return oldObj.updateAttributes(event, function(err, event) {
              return callback(err, null);
            });
          } else {
            return callback(Exc.notImplementedYet());
          }
        });
      };
    })(this));
  };

  CozyCalDAVBackend.prototype.deleteCalendarObject = function(calendarId, objectUri, callback) {
    return this._findCalendarObject(calendarId, objectUri, function(err, obj) {
      if (err) {
        return callback(err);
      }
      return obj.destroy(callback);
    });
  };

  CozyCalDAVBackend.prototype.calendarQuery = function(calendarId, filters, callback) {
    var objects, reader, validator;
    console.log('CalendarQuery', calendarId);
    console.log('Filters:');
    log.info(filters);
    objects = [];
    reader = VObject_Reader["new"]();
    validator = CalDAV_CQValidator["new"]();
    return async.parallel([
      (function(_this) {
        return function(cb) {
          return _this.Event.byCalendar(calendarId, cb);
        };
      })(this), (function(_this) {
        return function(cb) {
          return _this.User.getTimezone(cb);
        };
      })(this)
    ], (function(_this) {
      return function(err, results) {
        var caldavuri, error, events, ex, i, ical, id, jugglingObj, lastModification, len, timezone, uri, vobj;
        if (err) {
          return callback(err);
        }
        events = results[0], timezone = results[1];
        ical = null;
        vobj = null;
        jugglingObj = null;
        try {
          for (i = 0, len = events.length; i < len; i++) {
            jugglingObj = events[i];
            ical = _this._toICal(jugglingObj, timezone);
            vobj = reader.read(ical);
            if (validator.validate(vobj, filters)) {
              id = jugglingObj.id, caldavuri = jugglingObj.caldavuri, lastModification = jugglingObj.lastModification;
              uri = caldavuri || (id + ".ics");
              if (lastModification != null) {
                lastModification = new Date(lastModification);
              } else {
                lastModification = new Date();
              }
              objects.push({
                id: id,
                uri: uri,
                calendardata: ical,
                lastmodified: lastModification.getTime()
              });
            }
          }
        } catch (error) {
          ex = error;
          log.error('CalendarQuery went wrong with the following' + 'parameters:');
          log.error("calendarId: " + calendarId);
          log.error("filters:");
          log.error(filters);
          log.error("exception");
          log.error(ex);
          log.error("stack");
          log.error(ex.stack);
          log.error("jugglingObj");
          log.error(jugglingObj);
          log.error("ical");
          log.error(ical);
          log.error("vobj");
          console.log(vobj);
          return callback(ex, []);
        }
        return callback(null, objects);
      };
    })(this));
  };

  return CozyCalDAVBackend;

})();
